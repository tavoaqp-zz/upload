<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>net.sf.jupload</groupId>
	<artifactId>jupload</artifactId>
	<packaging>jar</packaging>
	<version>5.0.7</version>
	<name>
		JUpload project on Sourceforge
	</name>
	<description>
		Java Multiple File Upload Applet (JUpload) takes care of
		the limitation posed by traditional HTML upload forms
		by allowing you to upload a whole directory and the files within it with
		a single click. Optionally, it allows
		simple picture management. JUpload works also as a standard standalone Java application,
		and can be embedded in any Java application to do HTTP or FTP file transfert.
	</description>
	<url>
		http://jupload.sourceforge.net
	</url>
	<issueManagement>
		<system>
			Sourceforge trackers
		</system>
		<url>
			https://sourceforge.net/tracker/?group_id=59144
		</url>
	</issueManagement>
	<developers>
		<developer>
			<id>
				etienne_sf
			</id>
			<name>
				Etienne
			</name>
			<email>
				etienne_sf@users.sourceforge.net
			</email>
			<url>
				https://sourceforge.net/users/etienne_sf
			</url>
			<roles>
				<role>
					Administrator
				</role>
			</roles>
		</developer>
		<developer>
			<id>
				felfert
			</id>
			<name>
				Fritz Elfert
			</name>
			<email>
				felfert@users.sourceforge.net
			</email>
			<url>
				https://sourceforge.net/users/felfert
			</url>
			<roles>
				<role>
					Developper (Felfert did a lot enhancement, but he is no more active)
				</role>
			</roles>
		</developer>
		<developer>
			<id>
				postb99
			</id>
			<name>
				Barbara Post
			</name>
			<email>
				postb99@users.sourceforge.net
			</email>
			<url>
				https://sourceforge.net/users/postb99
			</url>
			<roles>
				<role>
					Developper
				</role>
			</roles>
		</developer>
		<developer>
			<id>
				nordfalk
			</id>
			<name>
				Jacob Nordfalk
			</name>
			<email>
				nordfalk@users.sourceforge.net
			</email>
			<url>
				https://sourceforge.net/users/nordfalk
			</url>
			<roles>
				<role>
					Developper
				</role>
			</roles>
		</developer>
		<developer>
			<id>
				ehsavoie
			</id>
			<name>
				ehsavoie
			</name>
			<email>
				ehsavoie@users.sourceforge.net
			</email>
			<url>
				https://sourceforge.net/users/ehsavoie
			</url>
			<roles>
				<role>
					Developper
				</role>
			</roles>
		</developer>
		<developer>
			<id>
				bilbo_uk
			</id>
			<name>
				Geoff
			</name>
			<email>
				bilbo_uk@users.sourceforge.net
			</email>
			<url>
				https://sourceforge.net/users/bilbo_uk
			</url>
			<roles>
				<role>
					Developper
				</role>
			</roles>
		</developer>
	</developers>
	<licenses>
		<license>
			<name>
				GNU GPL V3
			</name>
			<url>
				http://www.gnu.org/licenses/gpl-3.0.html
			</url>
			<comments>
				This project is a standard open source project... So let's use a standard open source licence.
			</comments>
		</license>
	</licenses>
	<scm>
		<connection>
			scm:svn:https://jupload.svn.sourceforge.net/svnroot/jupload/tags/jupload-5.0.7
		</connection>
		<developerConnection>
			scm:svn:https://jupload.svn.sourceforge.net/svnroot/jupload/tags/jupload-5.0.7
		</developerConnection>
		<url>
			https://jupload.svn.sourceforge.net/svnroot/jupload/tags/jupload-5.0.7
		</url>
	</scm>
	<pluginRepositories>
		<pluginRepository>
			<id>
				onejar-maven-plugin.googlecode.com
			</id>
			<url>
				http://onejar-maven-plugin.googlecode.com/svn/mavenrepo
			</url>
		</pluginRepository>
	</pluginRepositories>
	<profiles>
		<profile>
			<!-- The generate-key is executed twice in the release:perform goal. So, we remove the generated keystore,
			in the release:perform goal execution. This should be executed before the generate-key. So it will do
			something ... only if generate-key is executed twice. -->
			<id>
				remove-keystore
			</id>
			<activation>
				<file>
					<missing>
						target/keystore
					</missing>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>
							maven-antrun-plugin
						</artifactId>
						<executions>
							<execution>
								<phase>
									generate-sources
								</phase>
								<configuration>
									<tasks>
										<delete file="target/keystore" />
									</tasks>
								</configuration>
								<goals>
									<goal>
										run
									</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- This profile generates a key, for applet signing. This key is only used if the user didn't define
			the 'jupload.keystore.filename' property in its settings.xml file. -->
			<!-- See the HowTo compile, on JUpload site for details. -->
			<!-- See the generate-sign-key profile, here above, for use of this generated key. -->
			<id>
				generate-key
			</id>
			<activation>
				<file>
					<!-- Property biding is done after profile resulation. We need to 'hard-code' the file name, for
					it to work. -->
					<missing>
						keystore
					</missing>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>
							org.codehaus.mojo
						</groupId>
						<artifactId>
							keytool-maven-plugin
						</artifactId>
						<version>
							1.0
						</version>
						<!-- This plugin allows to locally generate a certificate, to sign the applet. See http://jupload.sourceforge.net/howto-compile.html -->
						<executions>
							<execution>
								<id>
									generate-demo-cert
								</id>
								<phase>
									prepare-package
								</phase>
								<!-- <goals>
								<goal>genkey</goal>
								</goals> -->
							</execution>
						</executions>
						<configuration>
							<alias>
								hdupload
							</alias>
							<keystore>
								/home/gustavo/.keystore
							</keystore>
							<storepass>
								changeit
							</storepass>
							<dname>
								cn=demo-jupload.sourceforge.net,ou=None,L=None,ST=None,o=JUpload,c=None
							</dname>
							<validity>
								180
							</validity> <!-- Six month is enough, for a demo certificate -->
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- The translate profile manages the language files. It actually executes the jupload-translation
			maven plugin (available in this package, in the ./jupload-translation/ folder). This execution take the
			source language files, in the ./src/main/lang/, and re-generates the ./src/main/resources/lang/* files. -->
			<!-- To activate it, you'll need to build the jupload-translation maven plugin, make it available
			in your local repository (mvn install in the ./jupload-translation/ folder should be enough), and define
			the jupload.translation property to true (by executing this command in the root jupload folder: mvn install
			-Djupload.translation) -->
			<id>
				translate
			</id>
			<activation>
				<property>
					<name>
						jupload.translation
					</name>
					<value>
						true
					</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>
							net.sf.jupload
						</groupId>
						<artifactId>
							maven-translation-plugin
						</artifactId>
						<version>
							1.1.0
						</version>
						<executions>
							<execution>
								<id>
									translate-generate-sources
								</id>
								<phase>
									generate-sources
								</phase>
								<goals>
									<goal>
										translate
									</goal>
								</goals>
							</execution>
							<execution>
								<id>
									translate-pre-site
								</id>
								<phase>
									pre-site
								</phase>
								<goals>
									<goal>
										translate
									</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<docFileExtension>
								.apt
							</docFileExtension>
							<docFolder>
								src/site/apt
							</docFolder>
							<coppermineFolder>
								src/main/translation/coppermine.utf-8
							</coppermineFolder>
							<inputEncoding>
								UTF-16
							</inputEncoding>
							<inputFolder>
								src/main/translation/applet.utf-16
							</inputFolder>
							<resourceLangFolder>
								src/main/resources/lang
							</resourceLangFolder>
							<templateAvailableTranslation>
								src/main/translation/available_translations.template
							</templateAvailableTranslation>
							<templateOneTranslation>
								src/main/translation/one_translation.template
							</templateOneTranslation>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<dependencies>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-client</artifactId>
			<version>1.12</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-atom</artifactId>
			<version>1.12</version>
		</dependency>
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>jsr311-api</artifactId>
			<version>1.1.1</version>
		</dependency>
          	<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1</version>
		</dependency>
  
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-json</artifactId>
			<version>1.12</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-fastinfoset</artifactId>
			<version>1.12</version>
		</dependency>
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.9.4</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.4</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-jaxrs</artifactId>
			<version>1.9.4</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-xc</artifactId>
			<version>1.9.4</version>
		</dependency>
		<dependency>
			<groupId>ant</groupId>
			<artifactId>ant</artifactId>
			<version>1.6.5</version>
		</dependency>
		<dependency>
			<groupId>rome</groupId>
			<artifactId>rome</artifactId>
			<version>0.9</version>
		</dependency>
		<dependency>
			<groupId>jdom</groupId>
			<artifactId>jdom</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jettison</groupId>
			<artifactId>jettison</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.fastinfoset</groupId>
			<artifactId>FastInfoset</artifactId>
			<version>1.2.9</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-net</groupId>
			<artifactId>commons-net</artifactId>
			<version>1.4.1</version>
		</dependency>
		<!-- classes netscape.javascript.* -->
		<dependency>
			<groupId>com.sun.runtime</groupId>
			<artifactId>java-plugin</artifactId>
			<version>1.5.0</version>
			<scope>system</scope>
			<systemPath>${java.home}/lib/plugin.jar</systemPath>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.13</version>
			<scope>test</scope>
		</dependency>
		<!-- Useless for the core applet. Used only to compile the jupload-translation plugin -->
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-plugin-api</artifactId>
			<version>2.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>
			wjhk.jupload
		</finalName>
		<resources>
			<resource>
				<directory>
					src/main/resources
				</directory>
				<filtering>
					true
				</filtering>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Bug with m2e : copy-dependencies generate an error message. This is a workaround. -->
					<groupId>
						org.eclipse.m2e
					</groupId>
					<artifactId>
						lifecycle-mapping
					</artifactId>
					<version>
						1.0.0
					</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.0,)
										</versionRange>
										<goals>
											<goal>
												copy-dependencies
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>
						org.codehaus.mojo
					</groupId>
					<artifactId>
						buildnumber-maven-plugin
					</artifactId>
					<version>
						1.0-beta-4
					</version>
				</plugin>
				<plugin>
					<groupId>
						org.apache.maven.plugins
					</groupId>
					<artifactId>
						maven-compiler-plugin
					</artifactId>
					<version>
						2.0.2
					</version>
				</plugin>
				<plugin>
					<groupId>
						org.apache.maven.plugins
					</groupId>
					<artifactId>
						maven-dependency-plugin
					</artifactId>
					<version>
						2.1
					</version>
				</plugin>
				<plugin>
					<groupId>
						org.apache.maven.plugins
					</groupId>
					<artifactId>
						maven-release-plugin
					</artifactId>
					<version>
						2.0-beta-9
					</version>
				</plugin>
				<plugin>
					<groupId>
						org.apache.maven.plugins
					</groupId>
					<artifactId>
						maven-resources-plugin
					</artifactId>
					<version>
						2.4.1
					</version>
				</plugin>
				<plugin>
					<groupId>
						org.apache.maven.plugins
					</groupId>
					<artifactId>
						maven-source-plugin
					</artifactId>
					<version>
						2.1.1
					</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>
					org.apache.maven.plugins
				</groupId>
				<artifactId>
					maven-compiler-plugin
				</artifactId>
				<configuration>
					<source>
						1.5
					</source>
					<target>
						1.5
					</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>
					maven-assembly-plugin
				</artifactId>
				<version>
					2.2-beta-5
				</version>
				<configuration>
					<descriptorRefs>
						<descriptorRef>
							jar-with-dependencies
						</descriptorRef>
					</descriptorRefs>
					<archive>

						<index>
							true
						</index>
						<manifest>
							<addDefaultImplementationEntries>
								true
							</addDefaultImplementationEntries>
						</manifest>
					</archive>
					<appendAssemblyId>false</appendAssemblyId>
					<finalName>wjhk.jupload</finalName>
				</configuration>
				<executions>
					<execution>
						<id>
							wjhk.jupload
						</id>
						<phase>
							package
						</phase>
						<goals>
							<goal>
								single
							</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- mvn ant:ant generates the build.xml for this project Caution: this will export the jupload.keystore.filename
				and jupload.keystore.storepass properties, from your settings.xml to the build.properties file. MUST
				BE CLEANED BEFORE COMMIT ! (because it contains your passwords) -->
				<groupId>
					org.apache.maven.plugins
				</groupId>
				<artifactId>
					maven-ant-plugin
				</artifactId>
				<version>
					2.2
				</version>
			</plugin>
			<plugin>
				<groupId>
					org.codehaus.mojo
				</groupId>
				<artifactId>
					buildnumber-maven-plugin
				</artifactId>
				<executions>
					<execution>
						<phase>
							validate
						</phase>
						<goals>
							<goal>
								create
							</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<doCheck>
						false
					</doCheck>
					<doUpdate>
						false
					</doUpdate>
					<revisionOnScmFailure>
						true
					</revisionOnScmFailure>
					<locale>
						en
					</locale>
					<useLastCommittedRevision>
						true
					</useLastCommittedRevision>
				</configuration>
			</plugin>
			<plugin>
				<!-- Get the dependencies jar files to a common place, for jar signing -->
				<groupId>
					org.apache.maven.plugins
				</groupId>
				<artifactId>
					maven-dependency-plugin
				</artifactId>
				<executions>
					<execution>
						<id>
							copy-dependencies-site
						</id>
						<phase>
							site
						</phase>
						<goals>
							<goal>
								copy-dependencies
							</goal>
						</goals>
						<configuration>
							<includeScope>
								runtime
							</includeScope>
							<outputDirectory>
								${project.build.directory}/site
							</outputDirectory>
							<overWriteReleases>
								false
							</overWriteReleases>
							<overWriteSnapshots>
								false
							</overWriteSnapshots>
							<overWriteIfNewer>
								true
							</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>
					org.apache.maven.plugins
				</groupId>
				<artifactId>
					maven-jarsigner-plugin
				</artifactId>
				<version>
					1.2
				</version>
				<executions>
					<execution>
						<!-- JUpload requires applet signing. The properties to sign the applet must be stored in your
						local settings.xml, under the jupload profile. See documentation for details -->
						<id>
							sign-artefact
						</id>
						<phase>
							package
						</phase>
						<goals>
							<goal>
								sign
							</goal>
						</goals>
						<configuration>
							<alias>
								${jupload.keystore.alias}
							</alias>
							<keystore>
								${jupload.keystore.filename}
							</keystore>
							<storepass>
								${jupload.keystore.storepass}
							</storepass>
							<removeExistingSignatures>
								true
							</removeExistingSignatures>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>
					maven-resources-plugin
				</artifactId>
				<executions>
					<execution>
						<id>
							install-copy-resources-jupload-jar
						</id>
						<phase>
							install
						</phase>
						<goals>
							<goal>
								copy-resources
							</goal>
						</goals>
						<configuration>
							<outputDirectory>
								${project.build.directory}/site
							</outputDirectory>
							<nonFilteredFileExtensions>
								<nonFilteredFileExtension>
									jar
								</nonFilteredFileExtension>
							</nonFilteredFileExtensions>
							<resources>
								<resource>
									<directory>
										${project.build.directory}
									</directory>
									<includes>
										<include>
											*.jar
										</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>
							site-copy-resources-jupload-jar
						</id>
						<phase>
							site
						</phase>
						<goals>
							<goal>
								copy-resources
							</goal>
						</goals>
						<configuration>
							<outputDirectory>
								${project.build.directory}/site
							</outputDirectory>
							<nonFilteredFileExtensions>
								<nonFilteredFileExtension>
									jar
								</nonFilteredFileExtension>
							</nonFilteredFileExtensions>
							<resources>
								<resource>
									<directory>
										${project.build.directory}
									</directory>
									<includes>
										<include>
											*.jar
										</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>
					org.apache.maven.plugins
				</groupId>
				<artifactId>
					maven-site-plugin
				</artifactId>
				<version>
					2.0.1
				</version>
				<configuration>
					<inputEncoding>
						UTF-8
					</inputEncoding>
					<outputEncoding>
						UTF-8
					</outputEncoding>
					<!-- templateFile>src/site/site.vm</templateFile -->
				</configuration>
			</plugin>
		</plugins>
	</build>
	<distributionManagement>
		<!-- We have no Maven repository yet. So release are to be deployed on a local repository.... TODO:
		have a real repository. Publish to Maven Central Repository? -->
		<repository>
			<id>
				${jupload.distributionManagement.repository.id}
			</id>
			<name>
				${jupload.distributionManagement.repository.name}
			</name>
			<url>
				${jupload.distributionManagement.repository.url}
			</url>
		</repository>
		<snapshotRepository>
			<id>
				${jupload.distributionManagement.snapshotRepository.id}
			</id>
			<name>
				${jupload.distributionManagement.snapshotRepository.name}
			</name>
			<url>
				${jupload.distributionManagement.snapshotRepository.url}
			</url>
		</snapshotRepository>
		<!-- The next tag allows to easily update the JUpload site, hosted by sourceforge.net -->
		<site>
			<id>
				jupload.website
			</id>
			<name>
				JUpload Website
			</name>
			<url>
				sftp://web.sourceforge.net/home/groups/j/ju/jupload/htdocs/
			</url>
		</site>
	</distributionManagement>
	<properties>
		<!-- All these properties can (should) be overriden in your settings.xml file. See the http://jupload.sourceforge.net/howto-compile.html
		page for details -->
		<!-- The next parameters are mandatory, for applet signing. Default behavior, in the pom, is to generate
		these parameters, if you didn't define them in your settings.xml. So, they are optional in your settings.
		If you don't define them, JUpload will use a generated keystore, with a certificate generated at compile
		time. BUT: if you want to PUBLISH the applet to real life users, you SHOULD define them. See the howto-compile
		on the JUpload site, for details -->
		<jupload.keystore.alias>
			hdupload
		</jupload.keystore.alias>
		<jupload.keystore.filename>
			/home/gustavo/.keystore
		</jupload.keystore.filename>
		<jupload.keystore.storepass>
			changeit
		</jupload.keystore.storepass>
		<!-- The next parameters are mandatory only for publishing Maven artefact to your repositories, that
		is: when you use the "deploy" maven goal. Useless when you 'just' compile, that is: when you use the
		'install' maven goal. There is currently no 'Central' jupload repository -->
		<jupload.distributionManagement.repository.id>
			Id_for_your_main_repository
		</jupload.distributionManagement.repository.id>
		<jupload.distributionManagement.repository.name>
			Name_for_your_main_repository
		</jupload.distributionManagement.repository.name>
		<jupload.distributionManagement.repository.url>
			URL_for_your_main_repository
		</jupload.distributionManagement.repository.url>
		<jupload.distributionManagement.snapshotRepository.id>
			Id_for_your_main_snapshotRepository
		</jupload.distributionManagement.snapshotRepository.id>
		<jupload.distributionManagement.snapshotRepository.name>
			Name_for_your_main_snapshotRepository
		</jupload.distributionManagement.snapshotRepository.name>
		<jupload.distributionManagement.snapshotRepository.url>
			URL_for_your_main_snapshotRepository
		</jupload.distributionManagement.snapshotRepository.url>
		<!-- The next parameters are mandatory only for PGP signing. PGP signing is used only when performing
		a release, that is: when executing the goal release:perform Not used (so: optional) otherwise. PGP signing
		is only used for developpers who would like to publish a new JUpload version to the Maven Central Repository.
		For all other users, you can let skip to true. -->
		<jupload.pgp.keyname>
			Your PGP key name
		</jupload.pgp.keyname>
		<!-- The passphrase is optional: if not provided, it will be asked to the user -->
		<jupload.pgp.passphrase>
			Your PGP passphrase
		</jupload.pgp.passphrase>
		<!-- The next parameters are mandatory, only for use of the maven release plugin. Optionnal otherwise.
		So for standard use of JUpload (without creating releases), you can let this parameter unchanged -->
		<jupload.scm.username>
			Your SCM login
		</jupload.scm.username>
		<jupload.scm.password>
			Your SCM password
		</jupload.scm.password>
		<project.build.sourceEncoding>
			UTF-8
		</project.build.sourceEncoding>
		<project.reporting.outputEncoding>
			UTF-8
		</project.reporting.outputEncoding>
	</properties>
	<!-- Reporting: see the 'reporting' profile, here above. -->
</project>
